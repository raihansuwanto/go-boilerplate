// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"context"
	"github.com/google/wire"
	"github.com/raihansuwanto/go-boilerplate/app/product"
	"github.com/raihansuwanto/go-boilerplate/app/product/delivery/web"
	"github.com/raihansuwanto/go-boilerplate/app/product/repo/gopg"
	"github.com/raihansuwanto/go-boilerplate/app/product/usecase/usecaseimpl"
	"github.com/raihansuwanto/go-boilerplate/package/config"
	"github.com/raihansuwanto/go-boilerplate/package/postgre"
	"github.com/raihansuwanto/go-boilerplate/package/postgre/pgddl"
)

// Injectors from wire.go:

func ProvideApp(ctx context.Context) (*App, error) {
	configConfig := config.MakeConfig()
	db := postgre.MakePostgreDBClient(configConfig)
	categoryRepoPG := gopg.NewCategoryRepoPG(db)
	categoryImpl := usecaseimpl.NewCategory(categoryRepoPG)
	productRepoPG := gopg.NewProductRepoPG(db)
	productImpl := usecaseimpl.NewProduct(categoryRepoPG, productRepoPG)
	productService := web.NewProductService(categoryImpl, productImpl)
	productRegistry := web.NewProductRegistry(productService)
	v := makeWebServiceRegistries(productRegistry)
	modeler := pgddl.NewModeler(db)
	app := newApp(configConfig, v, modeler, db)
	return app, nil
}

// wire.go:

var ModuleSet = wire.NewSet(

	makeWebServiceRegistries,
	newApp, pgddl.NewModeler, wire.Bind(new(postgre.Modeler), new(*pgddl.Modeler)), config.MakeConfig, postgre.MakePostgreDBClient, product.ModuleSet,
)
